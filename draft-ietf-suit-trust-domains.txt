



SUIT                                                            B. Moran
Internet-Draft                                               Arm Limited
Intended status: Standards Track                             K. Takayama
Expires: 14 May 2024                                     SECOM CO., LTD.
                                                        11 November 2023


           SUIT Manifest Extensions for Handling Dependencies
                    draft-ietf-suit-trust-domains-03

Abstract

   This specification describes extensions to the SUIT Manifest format
   for handling dependencies.  These dependency extension allows one
   Manifest to express a dependency on another Manifest.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 May 2024.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.





Moran & Takayama           Expires 14 May 2024                  [Page 1]

Internet-Draft              SUIT Dependencies              November 2023


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Conventions and Terminology . . . . . . . . . . . . . . . . .   3
   3.  Changes to SUIT Workflow Model  . . . . . . . . . . . . . . .   3
   4.  Changes to Manifest Structure . . . . . . . . . . . . . . . .   4
     4.1.  Manifest Component ID . . . . . . . . . . . . . . . . . .   5
     4.2.  SUIT_Dependencies Manifest Element  . . . . . . . . . . .   6
   5.    Changes to Required Checks  . . . . . . . . . . . . . . . .   7
   6.  Changes to Abstract Machine Description . . . . . . . . . . .   8
   7.  Processing Dependencies . . . . . . . . . . . . . . . . . . .   9
   8.  Dependency Resolution . . . . . . . . . . . . . . . . . . . .  11
   9.  Added and Modified Commands . . . . . . . . . . . . . . . . .  11
     9.1.  suit-directive-set-parameters . . . . . . . . . . . . . .  11
     9.2.  suit-directive-process-dependency . . . . . . . . . . . .  12
     9.3.  suit-condition-is-dependency  . . . . . . . . . . . . . .  12
     9.4.  suit-condition-dependency-integrity . . . . . . . . . . .  12
     9.5.  suit-directive-unlink . . . . . . . . . . . . . . . . . .  13
   10. Uninstall . . . . . . . . . . . . . . . . . . . . . . . . . .  13
   11. Creating Manifests  . . . . . . . . . . . . . . . . . . . . .  14
     11.1.  Dependency Template  . . . . . . . . . . . . . . . . . .  14
     11.2.  Composite Manifests  . . . . . . . . . . . . . . . . . .  15
     11.3.  Encrypted Manifest Template  . . . . . . . . . . . . . .  15
     11.4.  Operating on Multiple Components . . . . . . . . . . . .  16
   12. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  18
     12.1.  SUIT Envelope Elements . . . . . . . . . . . . . . . . .  18
     12.2.  SUIT Manifest Elements . . . . . . . . . . . . . . . . .  18
     12.3.  SUIT Common Elements . . . . . . . . . . . . . . . . . .  19
     12.4.  SUIT Commands  . . . . . . . . . . . . . . . . . . . . .  19
   13. Security Considerations . . . . . . . . . . . . . . . . . . .  19
   14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  19
     14.1.  Normative References . . . . . . . . . . . . . . . . . .  19
     14.2.  Informative References . . . . . . . . . . . . . . . . .  20
   Appendix A.  A.  Full CDDL  . . . . . . . . . . . . . . . . . . .  21
   Appendix B.  B.  Examples . . . . . . . . . . . . . . . . . . . .  22
     B.1.  Example 1: Process Dependency . . . . . . . . . . . . . .  23
     B.2.  Example 2: Integrated Dependency  . . . . . . . . . . . .  25
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  27

1.  Introduction

   The SUIT Manifest specification [I-D.ietf-suit-manifest] defines the
   basic functionality for protecting firmware images, software
   components and configuration data.

   Some use cases require more complex handling of software updates,
   such as:




Moran & Takayama           Expires 14 May 2024                  [Page 2]

Internet-Draft              SUIT Dependencies              November 2023


   *  A device may contain a processor in its radio in addition to the
      primary processor.  These two processors will typically have
      separate Software, which may be developed Authors.  Dependencies
      allow the Manifest for the primary processor to have a dependency
      on the Manifest for the radio module.

   *  A network operator may wish to provide local caching of Update
      Payloads.  The network operator overrides the URI of a Payload by
      providing a dependent Manifest that references the original
      Manifest, but replaces its URI.

   *  A device operator provides a device with some additional
      configuration.  The device operator wants to test their
      configuration with each new Software version before releasing it.
      The configuration is delivered as a binary in the same way as a
      Software Image.  The device operator references the Software
      Manifest from the Software author in their own Manifest which also
      defines the configuration.

   By using Dependencies, Components (such as Software, configuration,
   and other personalization data) can be delivered to devices.  A
   Dependency is thereby just another SUIT_Envelope that describes
   additional Components.

2.  Conventions and Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   This document uses terminology defined in [RFC9397] and in [RFC9019].

3.  Changes to SUIT Workflow Model

   The use of the features presented in this document requires
   augmentation of the workflow presented in the SUIT Manifest
   specification ([I-D.ietf-suit-manifest]):

   One additional assumption is added for the Update Procedure:

   *  All Dependency Manifests must be present before any Payload is
      fetched.

   One additional assumption is added to the Invocation Procedure:

   *  All Dependencies must be validated prior to loading.



Moran & Takayama           Expires 14 May 2024                  [Page 3]

Internet-Draft              SUIT Dependencies              November 2023


   Step 3 has been added to the expected installation workflow of a
   Recipient:

   1.  Verify the signature of the Manifest.

   2.  Verify the applicability of the Manifest.

   3.  Resolve Dependencies.

   4.  Fetch Payload(s).

   5.  Install Payload(s).

   In addition, when multiple Manifests are used for an Update, each
   Manifest's steps occur in a lockstep fashion; all Manifests have
   Dependency resolution performed before any Manifest performs a
   Payload fetch, etc.

4.  Changes to Manifest Structure

   To accommodate the additional metadata needed to enable these
   features, the Envelope and Manifest have several new elements added.

   The Envelope is enhanced with the Integrated Dependencies structure,
   as highlighted in Figure 1.  The Common Structure in the Manifest
   also gains a list of Dependencies.

























Moran & Takayama           Expires 14 May 2024                  [Page 4]

Internet-Draft              SUIT Dependencies              November 2023


   +-------------------------+
   | Envelope                |
   +-------------------------+
   | Authentication Block    |
   | Manifest           --------------> +------------------------------+
   | Severable Elements      |          | Manifest                     |
   | Integrated Payloads     |          +------------------------------+
   |*Integrated Dependencies*|          | Structure Version            |
   +-------------------------+          | Sequence Number              |
                                        | Reference to Full Manifest   |
                                  +------ Common Structure             |
                                  | +---- Command Sequences            |
   +-------------------------+    | |   | Digests of Envelope Elements |
   | Common Structure        | <--+ |   +------------------------------+
   +-------------------------+      |
   |*Dependency Indices*     |      |
   | Components IDs          |      +-> +-----------------------+
   | Common Command Sequence ---------> | Command Sequence      |
   +-------------------------+          +-----------------------+
                                        | List of ( pairs of (  |
                                        |   * command code      |
                                        |   * argument /        |
                                        |      reporting policy |
                                        | ))                    |
                                        +-----------------------+

  Figure 1: SUIT Manifest Structure: Enhancements with Dependencies

   This section augments the Manifest Structure (Section 8.4) in
   [I-D.ietf-suit-manifest].

4.1.  Manifest Component ID

   In complex systems, it may not always be clear where the Root
   Manifest should be stored; this is particularly complex when a system
   has multiple, independent Root Manifests.  The Manifest Component ID
   resolves this contention.  The manifest-component-id is intended to
   be used by the Root Manifest.  When a Dependency Manifest also
   declares a Component ID, the Dependency Manifest's Component ID is
   overridden by the Component ID declared by the dependent.

   The following CDDL describes the Manifest Component ID:

   $$SUIT_Manifest_Extensions //=
       (suit-manifest-component-id => SUIT_Component_Identifier)






Moran & Takayama           Expires 14 May 2024                  [Page 5]

Internet-Draft              SUIT Dependencies              November 2023


4.2.  SUIT_Dependencies Manifest Element

   The suit-common section, as described in [I-D.ietf-suit-manifest],
   Section 8.4.5 is extended with a map of Component indices that
   indicate a Dependency Manifest.  The keys of the map are the
   Component indices and the values of the map are any extra metadata
   needed to describe those Dependency Manifests.

   Because some operations treat Dependency Manifests differently from
   other Components, it is necessary to identify them.
   SUIT_Dependencies identifies which Components from suit-components
   (see Section 8.4.5 of [I-D.ietf-suit-manifest]) are to be treated as
   Dependency Manifest Envelopes.  SUIT_Dependencies is a map of
   Components, referenced by Component Index.  Optionally, a Component
   prefix or other metadata may be delivered with the Component index.
   The CDDL for suit-dependencies is shown below:

   $$SUIT_Common-extensions //= (
       suit-dependencies => SUIT_Dependencies
   )
   SUIT_Dependencies = {
       + uint => SUIT_Dependency_Metadata
   }
   SUIT_Dependency_Metadata = {
       ? suit-dependency-prefix => SUIT_Component_Identifier
       $$SUIT_Dependency_Extensions
   }

   If no extended metadata is needed for an extension,
   SUIT_Dependency_Metadata is an empty map (this is the same encoding
   size as a null).  SUIT_Dependencies MUST be sorted according to CBOR
   canonical encoding.

   The Components specified by SUIT_Dependency will contain a Manifest
   Envelope that describes a Dependency of the current Manifest.  The
   Manifest is identified, but the Recipient should expect an Envelope
   when it acquires the Dependency.  This is because the Manifest is the
   one invariant element of the Envelope, where other elements may
   change by countersigning, adding authentication blocks, or severing
   elements.

   When executing suit-condition-image-match over a Component that is
   designated in SUIT_Dependency, the digest MUST be computed over just
   the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope
   designated by the Component Index.  This enables a Dependency
   reference to uniquely identify a particular Manifest structure.  This
   is identical to the digest that is present as the first element of
   the suit-authentication-block in the Dependency's Envelope.  The



Moran & Takayama           Expires 14 May 2024                  [Page 6]

Internet-Draft              SUIT Dependencies              November 2023


   digest is calculated over the Manifest structure to ensure that
   removing a signature from a Manifest does not break Dependencies due
   to missing signature elements.  This is also necessary to support the
   trusted intermediary use case, where an intermediary re-signs the
   Manifest, removing the original signature, potentially with a
   different algorithm, or trading COSE_Sign for COSE_Mac.

   The suit-dependency-prefix element contains a
   SUIT_Component_Identifier (see Section 8.4.5.1 of
   [I-D.ietf-suit-manifest]).  This specifies the scope at which the
   Dependency operates.  This allows the Dependency to be forwarded on
   to a Component that is capable of parsing its own Manifests.  It also
   allows one Manifest to be deployed to multiple dependent Recipients
   without those Recipients needing consistent Component hierarchy.
   This element is OPTIONAL for Recipients to implement.

   A Dependency prefix can be used with a Component identifier.  This
   allows complex systems to understand where Dependencies need to be
   applied.  The Dependency prefix can be used in one of two ways.  The
   first simply prepends the prefix to all Component Identifiers in the
   Dependency.

   A Dependency prefix can also be used to indicate when a Dependency
   Manifest needs to be processed by a secondary Manifest processor, as
   described in Section 7.

5.    Changes to Required Checks

   This section augments the definitions in Required Checks
   (Section 6.2) of [I-D.ietf-suit-manifest].

   More checks are required when handling Dependencies.  By default, any
   signature of a Dependency MUST be verified.  However, there are some
   exceptions to this rule: where a device supports only one level of
   access (no ACLs defining which authorities have access to different
   Components/Commands/Parameters), it MAY choose to skip signature
   verification of Dependencies, since they are verified by digest.
   Where a device differentiates between trust levels, such as with an
   ACL, it MAY choose to defer the verification of signatures of
   Dependencies until the list of affected Components is known so that
   it can skip redundant signature verifications.  For example, if a
   dependent's signer has access rights to all Components specified in a
   Dependency, then that Dependency does not require a signature
   verification.  Similarly, if the signer of the dependent has full
   rights to the device, according to the ACL, then no signature
   verification is necessary on the Dependency.





Moran & Takayama           Expires 14 May 2024                  [Page 7]

Internet-Draft              SUIT Dependencies              November 2023


   Components that should be treated as Dependency Manifests are
   identified in the suit-common metadata.  See Section 4 for details.

   If the Manifest contains more than one Component and/or Dependency,
   each Command sequence MUST begin with a Set Component Index Command.

   If a Dependency is specified, then the Manifest processor MUST
   perform the following checks:

   1.  The dependent MUST populate all Command sequences for the current
       Procedure (Update or Invoke).

   2.  At the end of each section in the dependent: The corresponding
       section in each Dependency has been executed.

   If the interpreter does not support Dependencies and a Manifest
   specifies a Dependency, then the interpreter MUST Abort.

   If a Recipient supports groups of interdependent Components (a
   Component Set), then it SHOULD verify that all Components in the
   Component Set are specified by a single Manifest and all its
   Dependencies that together:

   1.  have sufficient permissions imparted by their signatures

   2.  specify a digest and a Payload for every Component in the
       Component Set.

   The single dependent Manifest is sometimes called a Root Manifest.

6.  Changes to Abstract Machine Description

   This section augments the Abstract Machine Description (Section 6.4)
   in [I-D.ietf-suit-manifest].  With the addition of Dependencies, some
   changes are necessary to the abstract machine, outside the typical
   scope of added Commands.  These changes alter the behaviour of an
   existing Command and way that the parser processes Manifests:

   *  Three new Commands are introduced:

      -  Process Dependency

      -  Is Dependency

      -  Dependency Integrity






Moran & Takayama           Expires 14 May 2024                  [Page 8]

Internet-Draft              SUIT Dependencies              November 2023


   *  Dependency Manifests are also Components.  All Commands may target
      Dependency Manifests as well as Components, with one exception:
      process Dependency.  Commands defined outside of this draft and
      [I-D.ietf-suit-manifest] MAY have additional restrictions.

   *  Dependencies are processed in lockstep with the Root Manifest.
      This means that every Dependency's current Command sequence must
      be executed before a dependent's later Command sequence may be
      executed.  For example, every Dependency's Dependency Resolution
      step MUST be executed before any dependent's Payload fetch step.

7.  Processing Dependencies

   As described in Section 5, each Manifest must invoke each of its
   Dependencies' sections from the corresponding section of the
   dependent.  Any changes made to Parameters by the Dependency persist
   in the dependent.

   When a Process Dependency Command is encountered, the Manifest
   processor:

   1.  Checks whether the map of Dependencies contains an entry for the
       current Component Index.  If not present, it causes an immediate
       Abort.

   2.  Checks whether the Dependency has been the target of a Dependency
       integrity check.  If not, it causes an immediate Abort.

   3.  Loads the specified Component as a Dependency Manifest Envelope.

   4.  Authenticates the Dependency Manifest.

   5.  Executes the common-sequence section of the Dependency Manifest.

   6.  Executes the section of the Dependency Manifest that corresponds
       to the currently executing section of the dependent.

   If the specified Dependency does not contain the current section,
   Process Dependency succeeds immediately.

   The interpreter also performs the checks described in Section 5 to
   ensure that the dependent is processing the Dependency correctly.









Moran & Takayama           Expires 14 May 2024                  [Page 9]

Internet-Draft              SUIT Dependencies              November 2023


   Computing devices have increasingly become more complex and may
   consist of different processors, each performing their own task.  For
   example, an application processor may have an attached communications
   module that contains a processor.  The communications module may be
   provisioned with Trust Anchors different from the Trust Anchors used
   on the application processor.

   When maintaining the lifecycle of software on those processors, a
   Manifest library might be required in each of those processors:

   *  The first Manifest library parser is the normal Manifest processor
      as described for the Recipient in Section 6 of
      [I-D.ietf-suit-manifest].

   *  The second Manifest processor only executes sections when the
      first Manifest processor requests it.

   An API interface is provided from the second Manifest processor to
   the first.  This allows the first Manifest processor to request a
   limited set of operations from the second.  These operations may be
   limited to: setting Parameters, inserting an Envelope, and invoking a
   Manifest Command Sequence.  The second Manifest processor declares a
   prefix to the first, which tells the first Manifest processor when it
   should delegate to the second.  These rules are enforced by
   underlying hardware and firmware.

   When the first Manifest processor encounters a Dependency prefix,
   that informs the first Manifest processor that it should provide the
   second Manifest processor with the corresponding Dependency Envelope.
   This is done when the Dependency is fetched.  The second Manifest
   processor immediately verifies any authentication information in the
   Dependency Envelope.  When a Parameter is set for any Component that
   matches the prefix, this Parameter setting is passed to the second
   Manifest processor via an API.  As the first Manifest processor works
   through the Procedure (set of Command sequences) it is executing,
   each time it sees a Process Dependency Command that is associated
   with the prefix declared by the second Manifest processor, it uses
   the API to ask the second Manifest processor to invoke that
   Dependency section instead.

   This mechanism ensures that the two or more Manifest processors do
   not need to trust each other, except in a very limited case.  When
   Parameter setting across trust domains is used, it must be very
   carefully considered.  Only Parameters that do not have an effect on
   security properties should be allowed.  The Dependency Manifest MAY
   control which Parameters are allowed to be set by using the Override
   Parameters Directive.  The second Manifest processor MAY also control
   which Parameters may be set by the first Manifest processor by means



Moran & Takayama           Expires 14 May 2024                 [Page 10]

Internet-Draft              SUIT Dependencies              November 2023


   of an ACL that lists the allowed Parameters.  For example, a URI may
   be set by a dependent without a substantial impact on the security
   properties of the Manifest.

8.  Dependency Resolution

   The Dependency Resolution Command Sequence is a container for the
   Commands needed to acquire and process the Dependencies of the
   current Manifest.  All Dependency Manifests SHOULD be fetched before
   any Payload is fetched to ensure that all Manifests are available and
   authenticated before any of the (larger) Payloads are acquired.

9.  Added and Modified Commands

   All Commands are modified in that they can also target Dependencies.
   However, Set Component Index has a larger modification.

          +================+====================================+
          | Command Name   | Semantic of the Operation          |
          +================+====================================+
          | Set Parameters | current.params[k] := v if not k in |
          |                | current.params for-each k,v in arg |
          +----------------+------------------------------------+
          | Process        | exec(current[common]);             |
          | Dependency     | exec(current[current-segment])     |
          +----------------+------------------------------------+
          | Dependency     | verify(current,                    |
          | Integrity      | current.params[image-digest])      |
          +----------------+------------------------------------+
          | Is Dependency  | assert(current exists in           |
          |                | Dependencies)                      |
          +----------------+------------------------------------+
          | Unlink         | unlink(current)                    |
          +----------------+------------------------------------+

                                  Table 1

9.1.  suit-directive-set-parameters

   Similar to suit-directive-override-parameters, suit-directive-set-
   parameters allows the Manifest to configure behavior of future
   Directives by changing Parameters that are read by those Directives.
   Set Parameters is for use when Dependencies are used because it
   allows a Manifest to modify the behavior of its Dependencies.

   Available Parameters are defined in [I-D.ietf-suit-manifest], section
   8.4.8.




Moran & Takayama           Expires 14 May 2024                 [Page 11]

Internet-Draft              SUIT Dependencies              November 2023


   If a Parameter is already set, suit-directive-set-parameters will
   skip setting the Parameter to its argument.  This allows dependent
   Manifests to change the behavior of a Manifest, a Dependency that
   wishes to enforce a specific value of a Parameter MAY use suit-
   directive-override-parameters instead.

   suit-directive-set-parameters does not specify a reporting policy.

9.2.  suit-directive-process-dependency

   Execute the Commands in the common section of the current Dependency,
   followed by the Commands in the equivalent section of the current
   Dependency.  For example, if the current section is "fetch Payload,"
   this will execute "common" in the current Dependency, then "fetch
   Payload" in the current Dependency.  Once this is complete, the
   Command following suit-directive-process-dependency will be
   processed.

   If the current Component index does not have an entry in the suit-
   dependencies map, then this Command MUST Abort.

   If the current Component index has not been the target of a suit-
   condition-dependency-integrity, then this Command MUST Abort.

   If the current Component is True, then this Directive applies to all
   Dependencies.  If the current section is "common," then the Command
   sequence MUST Abort.

   When SUIT_Process_Dependency completes, it forwards the last status
   code that occurred in the Dependency.

9.3.  suit-condition-is-dependency

   Check whether the current Component index is present in the
   Dependency list.  If the current Component is in the Dependency list,
   suit-condition-is-dependency succeeds.  Otherwise, it fails.  This
   can be used along with component-id = True to act on all Dependencies
   or on all non-Dependency Components.  See Section 11 for more
   details.

9.4.  suit-condition-dependency-integrity

   Verify the integrity of a Dependency Manifest.  When a Manifest
   Processor executes suit-condition-dependency-integrity, it performs
   the following operations:

   1.  Verify the signature of the Manifest hash




Moran & Takayama           Expires 14 May 2024                 [Page 12]

Internet-Draft              SUIT Dependencies              November 2023


   2.  Compare the Manifest hash to the provided hash

   3.  Verify the Manifest against the Manifest hash

   If any of these steps fails, the Manifest Process MUST immediately
   Abort.

   The Manifest Processor MAY cache the results of these operations for
   later use from the context of the current Manifest.  The Manifest
   Processor MUST NOT use cached results from any other Manifest
   context.  If the Manifest Processor caches the results of these
   checks, it MUST eliminate this cache if any Fetch, or Copy operation
   targets the Dependency Manifest's Component ID.

9.5.  suit-directive-unlink

   suit-directive-unlink applies to Manifests.  When the Components
   defined by a Manifest are no longer needed, the Manifest processor
   unlinks the Manifest to inform the Manifest processor that they are
   no longer needed.  The unlink Command decrements an implementation-
   defined reference counter.  This reference counter MUST persist
   across restarts.  The reference counter MUST NOT be decremented by a
   given Manifest more than once, and the Manifest processor must
   enforce this.  The Manifest processor MAY choose to ignore a Unlink
   Directive depending on device policy.

   When the reference counter reaches zero, the suit-uninstall Command
   sequence is invoked (see Section 10).

   suit-directive-unlink is OPTIONAL to implement in Manifest
   processors.

10.  Uninstall

   In some systems, particularly with multiple, independent, optional
   Components, it may be that there is a need to uninstall the
   Components that have been installed by a Manifest.  Where this is
   expected, the uninstall Command sequence can provide the sequence
   needed to cleanly remove the Components defined by the Manifest and
   its Dependencies.  In general, the suit-uninstall Command Sequence
   will contain primarily unlink Directives.










Moran & Takayama           Expires 14 May 2024                 [Page 13]

Internet-Draft              SUIT Dependencies              November 2023


   WARNING: This can cause faults where there are loose Dependencies
   (e.g., version range matching, see
   [I-D.ietf-suit-update-management]), since a Component can be removed
   while it is depended upon by another Component.  To avoid Dependency
   faults, a Manifest author MAY use explicit Dependencies where
   possible, or a Manifest processor MAY track references to loose
   Dependencies via reference counting in the same way as explicit
   Dependencies, as described in Section 9.5.

   The suit-uninstall Command Sequence is not severable, since it must
   always be available to enable uninstalling.

11.  Creating Manifests

   This section details a set of templates for creating Manifests.
   These templates explain which Parameters, Commands, and orders of
   Commands are necessary to achieve a stated goal.

11.1.  Dependency Template

   The goal of the Dependency template is to obtain, verify, and process
   a Dependency Manifest as appropriate.

   The following Commands are added to the shared sequence:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for digest (see
      Section 8.4.8.6 of [I-D.ietf-suit-manifest]).  Note that the
      digest MUST match the SUIT_Digest in the Dependency's suit-
      authentication-block (see Section 8.3 of
      [I-D.ietf-suit-manifest]).

   The following Commands are placed into the Dependency resolution
   sequence:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for a URI (see
      Section 8.4.8.10 of [I-D.ietf-suit-manifest])

   *  Fetch Directive (see Section 8.4.10.4 of [I-D.ietf-suit-manifest])

   *  Dependency Integrity Condition (see Section 9.4)

   *  Process Dependency Directive (see Section 9.2)



Moran & Takayama           Expires 14 May 2024                 [Page 14]

Internet-Draft              SUIT Dependencies              November 2023


   Then, the validate sequence contains the following operations:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Dependency Integrity Condition (see Section 9.4)

   *  Process Dependency Directive (see Section 9.2)

   If any Dependency is declared, the dependent MUST populate all
   Command sequences for the current Procedure (Update or Invoke).

   NOTE: Any changes made to Parameters in a Dependency persist in the
   dependent.

11.2.  Composite Manifests

   An implementer MAY choose to place a Dependency's Envelope in the
   Envelope of its dependent.  The dependent Envelope key for the
   Dependency Envelope MUST be a text string.  The URI for the
   Dependency MUST match the text string key of the dependent's Envelope
   key.  It is RECOMMENDED to make the text string key a resolvable URI
   so that a Dependency Manifest that is removed from the Envelope can
   still be fetched.

11.3.  Encrypted Manifest Template

   The goal of the Encrypted Manifest template is to fetch and decrypt a
   Manifest so that it can be used as a Dependency.  To use an encrypted
   Manifest, create a plaintext dependent, and add the encrypted
   Manifest as a Dependency.  The dependent can include very little
   information.

   NOTE: This template also requires the extensions defined in
   [I-D.ietf-suit-firmware-encryption].

   The following Commands are added to the shared sequence:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for digest (see
      Section 8.4.8.6 of [I-D.ietf-suit-manifest]).  Note that the
      digest MUST match the SUIT_Digest in the Dependency's suit-
      authentication-block (see Section 8.3 of
      [I-D.ietf-suit-manifest]).





Moran & Takayama           Expires 14 May 2024                 [Page 15]

Internet-Draft              SUIT Dependencies              November 2023


   The following operations are placed into the Dependency resolution
   block:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for

      -  URI (see Section 8.4.8.9 of [I-D.ietf-suit-manifest])

      -  Encryption Info (See [I-D.ietf-suit-firmware-encryption])

   *  Fetch Directive (see Section 8.4.10.4 of [I-D.ietf-suit-manifest])

   *  Dependency Integrity Condition (see Section 9.4)

   *  Process Dependency Directive (see Section 9.2)

   Then, the validate block contains the following operations:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Check Image Match Condition (see Section 8.4.9.2 of
      [I-D.ietf-suit-manifest])

   *  Process Dependency Directive (see Section 9.2)

   A plaintext Manifest and its encrypted Dependency may also form a
   composite Manifest (Section 11.2).

11.4.  Operating on Multiple Components

   In order to produce compact encoding, it is efficient to perform
   operations on multiple Components simultaneously.  Because Dependency
   Manifests and Component Images are processed at different times,
   there is a mechanism to distinguish between these elements: suit-
   condition-is-dependency.  This can be used with suit-directive-try-
   each to perform operations just on Dependency Manifests or just on
   Component Images.

   For example, to fetch all Dependency Manifests, the following
   Commands are added to the Dependency resolution block:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])





Moran & Takayama           Expires 14 May 2024                 [Page 16]

Internet-Draft              SUIT Dependencies              November 2023


   *  Set Parameters Directive (see Section 9.1) for a URI (see
      Section 8.4.8.9 of [I-D.ietf-suit-manifest])

   *  Set Component Index Directive, with argument "True" (see
      Section 8.4.10.1 of [I-D.ietf-suit-manifest])

   *  Try Each Directive

      -  Sequence 0

         o  Condition Is Dependency Manifest

         o  Fetch

         o  Dependency Integrity Condition (see Section 9.4)

         o  Process Dependency

      -  Sequence 1 (Empty; no Commands, succeeds immediately)

   Another example is to fetch and validate all Component Images.  The
   Image fetch sequence contains the following Commands:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for a URI (see
      Section 8.4.8.9 of [I-D.ietf-suit-manifest])

   *  Set Component Index Directive, with argument "True" (see
      Section 8.4.10.1 of [I-D.ietf-suit-manifest])

   *  Try Each Directive

      -  Sequence 0

         o  Condition Is Dependency Manifest

         o  Process Dependency

      -  Sequence 1

         o  Fetch

         o  Condition Image Match






Moran & Takayama           Expires 14 May 2024                 [Page 17]

Internet-Draft              SUIT Dependencies              November 2023


   When some Components are "installed" or "loaded" it is more
   productive to use lists of Component indices rather than Component
   Index = True.  For example, to install several Components, the
   following Commands should be placed in the Image Install Sequence:

   *  Set Component Index Directive (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Set Parameters Directive (see Section 9.1) for the Source
      Component (see Section 8.4.8.11 of [I-D.ietf-suit-manifest])

   *  Set Component Index Directive, with argument containing list of
      destination Component indices (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Copy

   *  Set Component Index Directive, with argument containing list
      Dependency Component indices (see Section 8.4.10.1 of
      [I-D.ietf-suit-manifest])

   *  Process Dependency

12.  IANA Considerations

   IANA is requested to allocate the following numbers in the listed
   registries:

12.1.  SUIT Envelope Elements

              +=======+=======================+============+
              | Label | Name                  | Reference  |
              +=======+=======================+============+
              | 15    | Dependency Resolution | Section 8  |
              +-------+-----------------------+------------+
              | 24    | Uninstall             | Section 10 |
              +-------+-----------------------+------------+

                                 Table 2

12.2.  SUIT Manifest Elements

              +=======+=======================+=============+
              | Label | Name                  | Reference   |
              +=======+=======================+=============+
              | 5     | Manifest Component ID | Section 4.1 |
              +-------+-----------------------+-------------+




Moran & Takayama           Expires 14 May 2024                 [Page 18]

Internet-Draft              SUIT Dependencies              November 2023


                                  Table 3

12.3.  SUIT Common Elements

                  +=======+==============+=============+
                  | Label | Name         | Reference   |
                  +=======+==============+=============+
                  | 1     | Dependencies | Section 4.2 |
                  +-------+--------------+-------------+

                                 Table 4

12.4.  SUIT Commands

              +=======+======================+=============+
              | Label | Name                 | Reference   |
              +=======+======================+=============+
              | 7     | Dependency Integrity | Section 9.4 |
              +-------+----------------------+-------------+
              | 8     | Is Dependency        | Section 9.3 |
              +-------+----------------------+-------------+
              | 11    | Process Dependency   | Section 9.2 |
              +-------+----------------------+-------------+
              | 19    | Set Parameters       | Section 9.1 |
              +-------+----------------------+-------------+
              | 33    | Unlink               | Section 9.5 |
              +-------+----------------------+-------------+

                                 Table 5

13.  Security Considerations

   This document is about a Manifest format protecting and describing
   how to retrieve, install, and invoke Images and, as such, it is part
   of a larger solution for delivering software updates to devices.  A
   detailed security treatment of SUIT manifests can be found in the
   architecture [RFC9019] and in the information model [RFC9124]
   documents.

14.  References

14.1.  Normative References

   [I-D.ietf-suit-manifest]
              Moran, B., Tschofenig, H., Birkholz, H., Zandberg, K., and
              O. Rønningstad, "A Concise Binary Object Representation
              (CBOR)-based Serialization Format for the Software Updates
              for Internet of Things (SUIT) Manifest", Work in Progress,



Moran & Takayama           Expires 14 May 2024                 [Page 19]

Internet-Draft              SUIT Dependencies              November 2023


              Internet-Draft, draft-ietf-suit-manifest-24, 23 October
              2023, <https://datatracker.ietf.org/doc/html/draft-ietf-
              suit-manifest-24>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <https://www.rfc-editor.org/rfc/rfc7228>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

14.2.  Informative References

   [I-D.ietf-suit-firmware-encryption]
              Tschofenig, H., Housley, R., Moran, B., Brown, D., and K.
              Takayama, "Encrypted Payloads in SUIT Manifests", Work in
              Progress, Internet-Draft, draft-ietf-suit-firmware-
              encryption-18, 23 October 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-suit-
              firmware-encryption-18>.

   [I-D.ietf-suit-update-management]
              Moran, B. and K. Takayama, "Update Management Extensions
              for Software Updates for Internet of Things (SUIT)
              Manifests", Work in Progress, Internet-Draft, draft-ietf-
              suit-update-management-05, 8 November 2023,
              <https://datatracker.ietf.org/doc/html/draft-ietf-suit-
              update-management-05>.

   [RFC9019]  Moran, B., Tschofenig, H., Brown, D., and M. Meriac, "A
              Firmware Update Architecture for Internet of Things",
              RFC 9019, DOI 10.17487/RFC9019, April 2021,
              <https://www.rfc-editor.org/rfc/rfc9019>.

   [RFC9124]  Moran, B., Tschofenig, H., and H. Birkholz, "A Manifest
              Information Model for Firmware Updates in Internet of
              Things (IoT) Devices", RFC 9124, DOI 10.17487/RFC9124,
              January 2022, <https://www.rfc-editor.org/rfc/rfc9124>.






Moran & Takayama           Expires 14 May 2024                 [Page 20]

Internet-Draft              SUIT Dependencies              November 2023


   [RFC9397]  Pei, M., Tschofenig, H., Thaler, D., and D. Wheeler,
              "Trusted Execution Environment Provisioning (TEEP)
              Architecture", RFC 9397, DOI 10.17487/RFC9397, July 2023,
              <https://www.rfc-editor.org/rfc/rfc9397>.

Appendix A.  A.  Full CDDL

   To be valid, the following CDDL MUST be appended to the SUIT Manifest
   CDDL.  The SUIT CDDL is defined in Appendix A of
   [I-D.ietf-suit-manifest]

   $$SUIT_Envelope_Extensions //=
       (suit-delegation => bstr .cbor SUIT_Delegation)
   $$SUIT_Envelope_Extensions //= (
       suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

   SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

   CWT = SUIT_Authentication_Block

   $$SUIT_Manifest_Extensions //=
       (suit-manifest-component-id => SUIT_Component_Identifier)

   $$SUIT_severable-members-extensions //=
       (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

   $$unseverable-manifest-member-extensions //=
       (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

   suit-integrated-dependency-key = tstr

   $$severable-manifest-members-choice-extensions //= (
       suit-dependency-resolution =>
           bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

   $$SUIT_Common-extensions //= (
       suit-dependencies => SUIT_Dependencies
   )
   SUIT_Dependencies = {
       + uint => SUIT_Dependency_Metadata
   }
   SUIT_Dependency_Metadata = {
       ? suit-dependency-prefix => SUIT_Component_Identifier
       * $$SUIT_Dependency_Extensions
   }

   SUIT_Condition // (
       suit-condition-dependency-integrity, SUIT_Rep_Policy)



Moran & Takayama           Expires 14 May 2024                 [Page 21]

Internet-Draft              SUIT Dependencies              November 2023


   SUIT_Condition //= (
       suit-condition-is-dependency, SUIT_Rep_Policy)

   SUIT_Directive //= (
       suit-directive-process-dependency, SUIT_Rep_Policy)
   SUIT_Directive //= (suit-directive-set-parameters,
       {+ $$SUIT_Parameters})
   SUIT_Directive //= (
       suit-directive-unlink, SUIT_Rep_Policy)

   suit-manifest-component-id = 5

   suit-delegation = 1
   suit-dependency-resolution = 15
   suit-uninstall = 24

   suit-dependencies = 1

   suit-dependency-prefix = 1

   suit-condition-dependency-integrity     = 7
   suit-condition-is-dependency            = 8
   suit-directive-process-dependency       = 11
   suit-directive-set-parameters           = 19
   suit-directive-unlink                   = 33

Appendix B.  B.  Examples

   The following examples demonstrate a small subset of the
   functionalities in this document.

   The examples are signed using the following ECDSA secp256r1 key:

   -----BEGIN PRIVATE KEY-----
   MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
   CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
   P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
   -----END PRIVATE KEY-----

   The corresponding public key can be used to verify these examples:

   -----BEGIN PUBLIC KEY-----
   MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
   bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
   -----END PUBLIC KEY-----

   Each example uses SHA256 as the digest function.




Moran & Takayama           Expires 14 May 2024                 [Page 22]

Internet-Draft              SUIT Dependencies              November 2023


B.1.  Example 1: Process Dependency

   This example uses functionalities:

   *  manifest component id

   *  dependency resolution

   *  process dependency

/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'4874ADC80A9128A2B2057F5FE59C45F8ED10A9BF9C5308FCF951B8BBAF434B95'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'C257E23A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD2209886889
          1DF42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B916'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],



Moran & Takayama           Expires 14 May 2024                 [Page 23]

Internet-Draft              SUIT Dependencies              November 2023


    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})

   Total size of Envelope with COSE authentication object: 374

   Envelope with COSE authentication object:






Moran & Takayama           Expires 14 May 2024                 [Page 24]

Internet-Draft              SUIT Dependencies              November 2023


   D86BA2025873825824822F58204874ADC80A9128A2B2057F5FE59C45F8ED
   10A9BF9C5308FCF951B8BBAF434B95584AD28443A10126A0F65840C257E2
   3A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD22098868891D
   F42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B9
   160358FAA70101020003581CA201A101A101814E646570656E64656E742E
   7375697402818142313005814E646570656E64696E672E73756974095286
   0C0014A11749636174203030203130170F0F5858880C0114A3035824822F
   58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
   DB23E7680E190160157821687474703A2F2F6578616D706C652E636F6D2F
   646570656E64656E742E737569741502030F1158538E0C0114A103582482
   2F58206EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA3
   88B13E2F51070F0B000C0014A112581A20696E206D756C7469706C652074
   7275737420646F6D61696E73120F

B.2.  Example 2: Integrated Dependency

   *  manifest component id

   *  dependency resolution

   *  process dependency

   *  integrated dependency

/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'318EAD5F671A6D2593D7ADB7B6CCADC49F72704507004F297A25AF16A48A2111'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'287D5AAB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C99
          50D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627DC3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {



Moran & Takayama           Expires 14 May 2024                 [Page 25]

Internet-Draft              SUIT Dependencies              November 2023


          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  / NOTE: Example 0 /
  "#dependent.suit":



Moran & Takayama           Expires 14 May 2024                 [Page 26]

Internet-Draft              SUIT Dependencies              November 2023


    h'D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158200E
      908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03ABA68B22
      582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D314B2749EE42
      D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925
      C155E7245A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE
      4C4B5315025874835824822F58206EA128D7BB19B86F77C4227F2A29F22026A4
      1958ACC45CC0A35BA388B13E2F51584AD28443A10126A0F6584099F949043701
      D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA913576DEF136B74E
      A89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF27440035842A601
      0102000347A102818142303005814E646570656E64656E742E73756974094D84
      14A11746636174203030170F11528414A1124B68656C6C6F20776F726C64120F'
})

   Total size of Envelope with COSE authentication object: 683

   Envelope with COSE authentication object:

   D86BA3025873825824822F5820318EAD5F671A6D2593D7ADB7B6CCADC49F
   72704507004F297A25AF16A48A2111584AD28443A10126A0F65840287D5A
   AB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C9950
   D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627D
   C30358BCA70101020003581CA201A101A101814E646570656E64656E742E
   7375697402818142313005814E646570656E64696E672E73756974095286
   0C0014A11749636174203030203130170F0F5845880C0114A3035824822F
   58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
   DB23E7680E190160156F23646570656E64656E742E737569741502030F11
   58288A0C010B000C0014A112581A20696E206D756C7469706C6520747275
   737420646F6D61696E73120F6F23646570656E64656E742E737569745901
   60D86BA301589E8181589AD28443A10126A0584FA108A101A40102200121
   58200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD
   03ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D7
   1D314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F79871
   5CC10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B8
   2D06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB
   19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD2
   8443A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A49
   00DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41
   C153CA51548C73FF71A2BAF27440035842A6010102000347A10281814230
   3005814E646570656E64656E742E73756974094D8414A117466361742030
   30170F11528414A1124B68656C6C6F20776F726C64120F

Authors' Addresses

   Brendan Moran
   Arm Limited
   Email: brendan.moran.ietf@gmail.com





Moran & Takayama           Expires 14 May 2024                 [Page 27]

Internet-Draft              SUIT Dependencies              November 2023


   Ken Takayama
   SECOM CO., LTD.
   Email: ken.takayama.ietf@gmail.com
















































Moran & Takayama           Expires 14 May 2024                 [Page 28]
