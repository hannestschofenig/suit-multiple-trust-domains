<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="trust200902" docName="draft-ietf-suit-trust-domains-03" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="SUIT Dependencies">SUIT Manifest Extensions for Handling Dependencies</title>

    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>brendan.moran.ietf@gmail.com</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="November" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<?line 50?>

<t>This specification describes extensions to the SUIT Manifest format for
handling dependencies. These dependency extension allows one Manifest
to express a dependency on another Manifest.</t>



    </abstract>



  </front>

  <middle>


<?line 56?>

<section anchor="introduction"><name>Introduction</name>

<t>The SUIT Manifest specification <xref target="I-D.ietf-suit-manifest"/> defines the basic
functionality for protecting firmware images, software components and configuration
data.</t>

<t>Some use cases require more complex handling of software updates, such as:</t>

<t><list style="symbols">
  <t>A device may contain a processor in its radio in addition to the primary processor. These two processors will typically have separate Software, which may be developed Authors. Dependencies allow the Manifest for the primary processor to have a dependency on the Manifest for the radio module.</t>
  <t>A network operator may wish to provide local caching of Update Payloads. The network operator overrides the URI of a Payload by providing a dependent Manifest that references the original Manifest, but replaces its URI.</t>
  <t>A device operator provides a device with some additional configuration. The device operator wants to test their configuration with each new Software version before releasing it. The configuration is delivered as a binary in the same way as a Software Image. The device operator references the Software Manifest from the Software author in their own Manifest which also defines the configuration.</t>
</list></t>

<t>By using Dependencies, Components (such as Software, configuration, and other personalization data) can be delivered to devices. A Dependency is thereby just another SUIT_Envelope that describes additional Components.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
"MAY", and "OPTIONAL" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.
<?line -6?></t>

<t>This document uses terminology defined in <xref target="RFC9397"/> and in <xref target="RFC9019"/>.</t>

</section>
<section anchor="changes-to-suit-workflow-model"><name>Changes to SUIT Workflow Model</name>

<t>The use of the features presented in this document requires augmentation of the workflow presented in the SUIT Manifest specification (<xref target="I-D.ietf-suit-manifest"/>):</t>

<t>One additional assumption is added for the Update Procedure:</t>

<t><list style="symbols">
  <t>All Dependency Manifests must be present before any Payload is fetched.</t>
</list></t>

<t>One additional assumption is added to the Invocation Procedure:</t>

<t><list style="symbols">
  <t>All Dependencies must be validated prior to loading.</t>
</list></t>

<t>Step 3 has been added to the expected installation workflow of a Recipient:</t>

<t><list style="numbers">
  <t>Verify the signature of the Manifest.</t>
  <t>Verify the applicability of the Manifest.</t>
  <t>Resolve Dependencies.</t>
  <t>Fetch Payload(s).</t>
  <t>Install Payload(s).</t>
</list></t>

<t>In addition, when multiple Manifests are used for an Update, each Manifest's steps occur in a lockstep fashion; all Manifests have Dependency resolution performed before any Manifest performs a Payload fetch, etc.</t>

</section>
<section anchor="structure-change"><name>Changes to Manifest Structure</name>

<t>To accommodate the additional metadata needed to enable these features, the Envelope and Manifest have several new elements added.</t>

<t>The Envelope is enhanced with the Integrated Dependencies structure, as highlighted in <xref target="manifest-fig"/>. The Common Structure in the Manifest also gains a list of Dependencies.</t>

<figure title="SUIT Manifest Structure: Enhancements with Dependencies" anchor="manifest-fig"><artwork><![CDATA[
   +-------------------------+
   | Envelope                |
   +-------------------------+
   | Authentication Block    |
   | Manifest           --------------> +------------------------------+
   | Severable Elements      |          | Manifest                     |
   | Integrated Payloads     |          +------------------------------+
   |*Integrated Dependencies*|          | Structure Version            |
   +-------------------------+          | Sequence Number              |
                                        | Reference to Full Manifest   |
                                  +------ Common Structure             |
                                  | +---- Command Sequences            |
   +-------------------------+    | |   | Digests of Envelope Elements |
   | Common Structure        | <--+ |   +------------------------------+
   +-------------------------+      |
   |*Dependency Indices*     |      |
   | Components IDs          |      +-> +-----------------------+
   | Common Command Sequence ---------> | Command Sequence      |
   +-------------------------+          +-----------------------+
                                        | List of ( pairs of (  |
                                        |   * command code      |
                                        |   * argument /        |
                                        |      reporting policy |
                                        | ))                    |
                                        +-----------------------+
]]></artwork></figure>

<t>This section augments the Manifest Structure (Section 8.4) in <xref target="I-D.ietf-suit-manifest"/>.</t>

<section anchor="manifest-id"><name>Manifest Component ID</name>

<t>In complex systems, it may not always be clear where the Root Manifest should be stored; this is particularly complex when a system has multiple, independent Root Manifests. The Manifest Component ID resolves this contention. The manifest-component-id is intended to be used by the Root Manifest. When a Dependency Manifest also declares a Component ID, the Dependency Manifest's Component ID is overridden by the Component ID declared by the dependent.</t>

<t>The following CDDL describes the Manifest Component ID:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)
]]></sourcecode></figure>

</section>
<section anchor="SUIT_Dependencies"><name>SUIT_Dependencies Manifest Element</name>

<t>The suit-common section, as described in <xref target="I-D.ietf-suit-manifest"/>, Section 8.4.5 is extended with a map of Component indices that indicate a Dependency Manifest. The keys of the map are the Component indices and the values of the map are any extra metadata needed to describe those Dependency Manifests.</t>

<t>Because some operations treat Dependency Manifests differently from other Components, it is necessary to identify them. SUIT_Dependencies identifies which Components from suit-components (see Section 8.4.5 of <xref target="I-D.ietf-suit-manifest"/>) are to be treated as Dependency Manifest Envelopes. SUIT_Dependencies is a map of Components, referenced by Component Index. Optionally, a Component prefix or other metadata may be delivered with the Component index. The CDDL for suit-dependencies is shown below:</t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    $$SUIT_Dependency_Extensions
}
]]></sourcecode></figure>

<t>If no extended metadata is needed for an extension, SUIT_Dependency_Metadata is an empty map (this is the same encoding size as a null). SUIT_Dependencies MUST be sorted according to CBOR canonical encoding.</t>

<t>The Components specified by SUIT_Dependency will contain a Manifest Envelope that describes a Dependency of the current Manifest. The Manifest is identified, but the Recipient should expect an Envelope when it acquires the Dependency. This is because the Manifest is the one invariant element of the Envelope, where other elements may change by countersigning, adding authentication blocks, or severing elements.</t>

<t>When executing suit-condition-image-match over a Component that is designated in SUIT_Dependency, the digest MUST be computed over just the bstr-wrapped SUIT_Manifest contained in the Manifest Envelope designated by the Component Index. This enables a Dependency reference to uniquely identify a particular Manifest structure. This is identical to the digest that is present as the first element of the suit-authentication-block in the Dependency's Envelope. The digest is calculated over the Manifest structure to ensure that removing a signature from a Manifest does not break Dependencies due to missing signature elements. This is also necessary to support the trusted intermediary use case, where an intermediary re-signs the Manifest, removing the original signature, potentially with a different algorithm, or trading COSE_Sign for COSE_Mac.</t>

<t>The suit-dependency-prefix element contains a SUIT_Component_Identifier (see Section 8.4.5.1 of <xref target="I-D.ietf-suit-manifest"/>). This specifies the scope at which the Dependency operates. This allows the Dependency to be forwarded on to a Component that is capable of parsing its own Manifests. It also allows one Manifest to be deployed to multiple dependent Recipients without those Recipients needing consistent Component hierarchy. This element is OPTIONAL for Recipients to implement.</t>

<t>A Dependency prefix can be used with a Component identifier. This allows complex systems to understand where Dependencies need to be applied. The Dependency prefix can be used in one of two ways. The first simply prepends the prefix to all Component Identifiers in the Dependency.</t>

<t>A Dependency prefix can also be used to indicate when a Dependency Manifest needs to be processed by a secondary Manifest processor, as described in <xref target="processing-dependencies"/>.</t>

</section>
</section>
<section anchor="required-checks"><name>Â  Changes to Required Checks</name>

<t>This section augments the definitions in Required Checks (Section 6.2) of <xref target="I-D.ietf-suit-manifest"/>.</t>

<t>More checks are required when handling Dependencies. By default, any signature of a Dependency MUST be verified. However, there are some exceptions to this rule: where a device supports only one level of access (no ACLs defining which authorities have access to different Components/Commands/Parameters), it MAY choose to skip signature verification of Dependencies, since they are verified by digest. Where a device differentiates between trust levels, such as with an ACL, it MAY choose to defer the verification of signatures of Dependencies until the list of affected Components is known so that it can skip redundant signature verifications. For example, if a dependent's signer has access rights to all Components specified in a Dependency, then that Dependency does not require a signature verification. Similarly, if the signer of the dependent has full rights to the device, according to the ACL, then no signature verification is necessary on the Dependency.</t>

<t>Components that should be treated as Dependency Manifests are identified in the suit-common metadata. See <xref target="structure-change"/> for details.</t>

<t>If the Manifest contains more than one Component and/or Dependency, each Command sequence MUST begin with a Set Component Index Command.</t>

<t>If a Dependency is specified, then the Manifest processor MUST perform the following checks:</t>

<t><list style="numbers">
  <t>The dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>
  <t>At the end of each section in the dependent: The corresponding section in each Dependency has been executed.</t>
</list></t>

<t>If the interpreter does not support Dependencies and a Manifest specifies a Dependency, then the interpreter MUST Abort.</t>

<t>If a Recipient supports groups of interdependent Components (a Component Set), then it SHOULD verify that all Components in the Component Set are specified by a single Manifest and all its Dependencies that together:</t>

<t><list style="numbers">
  <t>have sufficient permissions imparted by their signatures</t>
  <t>specify a digest and a Payload for every Component in the Component Set.</t>
</list></t>

<t>The single dependent Manifest is sometimes called a Root Manifest.</t>

</section>
<section anchor="changes-to-abstract-machine-description"><name>Changes to Abstract Machine Description</name>

<t>This section augments the Abstract Machine Description (Section 6.4) in <xref target="I-D.ietf-suit-manifest"/>.
With the addition of Dependencies, some changes are necessary to the abstract machine, outside the typical scope of added Commands. These changes alter the behaviour of an existing Command and way that the parser processes Manifests:</t>

<t><list style="symbols">
  <t>Three new Commands are introduced:  <list style="symbols">
      <t>Process Dependency</t>
      <t>Is Dependency</t>
      <t>Dependency Integrity</t>
    </list></t>
  <t>Dependency Manifests are also Components. All Commands may target Dependency Manifests as well as Components, with one exception: process Dependency. Commands defined outside of this draft and <xref target="I-D.ietf-suit-manifest"/> MAY have additional restrictions.</t>
  <t>Dependencies are processed in lockstep with the Root Manifest. This means that every Dependency's current Command sequence must be executed before a dependent's later Command sequence may be executed. For example, every Dependency's Dependency Resolution step MUST be executed before any dependent's Payload fetch step.</t>
</list></t>

</section>
<section anchor="processing-dependencies"><name>Processing Dependencies</name>

<t>As described in <xref target="required-checks"/>, each Manifest must invoke each of its Dependencies' sections from the corresponding section of the dependent. Any changes made to Parameters by the Dependency persist in the dependent.</t>

<t>When a Process Dependency Command is encountered, the Manifest processor:</t>

<t><list style="numbers">
  <t>Checks whether the map of Dependencies contains an entry for the current Component Index. If not present, it causes an immediate Abort.</t>
  <t>Checks whether the Dependency has been the target of a Dependency integrity check. If not, it causes an immediate Abort.</t>
  <t>Loads the specified Component as a Dependency Manifest Envelope.</t>
  <t>Authenticates the Dependency Manifest.</t>
  <t>Executes the common-sequence section of the Dependency Manifest.</t>
  <t>Executes the section of the Dependency Manifest that corresponds to the currently executing section of the dependent.</t>
</list></t>

<t>If the specified Dependency does not contain the current section, Process Dependency succeeds immediately.</t>

<t>The interpreter also performs the checks described in <xref target="required-checks"/> to ensure that the dependent is processing the Dependency correctly.</t>

<t>Computing devices have increasingly become more complex and may consist of different processors, each performing their own task. For example, an application processor may have an attached communications module that contains a processor. The communications module may be provisioned with Trust Anchors different from the Trust Anchors used on the application processor.</t>

<t>When maintaining the lifecycle of software on those processors, a Manifest library might be required in each of those processors:</t>

<t><list style="symbols">
  <t>The first Manifest library parser is the normal Manifest processor as described for the Recipient in Section 6 of <xref target="I-D.ietf-suit-manifest"/>.</t>
  <t>The second Manifest processor only executes sections when the first Manifest processor requests it.</t>
</list></t>

<t>An API interface is provided from the second Manifest processor to the first. This allows the first Manifest processor to request a limited set of operations from the second. These operations may be limited to: setting Parameters, inserting an Envelope, and invoking a Manifest Command Sequence. The second Manifest processor declares a prefix to the first, which tells the first Manifest processor when it should delegate to the second. These rules are enforced by underlying hardware and firmware.</t>

<t>When the first Manifest processor encounters a Dependency prefix, that informs the first Manifest processor that it should provide the second Manifest processor with the corresponding Dependency Envelope. This is done when the Dependency is fetched. The second Manifest processor immediately verifies any authentication information in the Dependency Envelope. When a Parameter is set for any Component that matches the prefix, this Parameter setting is passed to the second Manifest processor via an API. As the first Manifest processor works through the Procedure (set of Command sequences) it is executing, each time it sees a Process Dependency Command that is associated with the prefix declared by the second Manifest processor, it uses the API to ask the second Manifest processor to invoke that Dependency section instead.</t>

<t>This mechanism ensures that the two or more Manifest processors do not need to trust each other, except in a very limited case. When Parameter setting across trust domains is used, it must be very carefully considered. Only Parameters that do not have an effect on security properties should be allowed. The Dependency Manifest MAY control which Parameters are allowed to be set by using the Override Parameters Directive. The second Manifest processor MAY also control which Parameters may be set by the first Manifest processor by means of an ACL that lists the allowed Parameters. For example, a URI may be set by a dependent without a substantial impact on the security properties of the Manifest.</t>

</section>
<section anchor="suit-dependency-resolution"><name>Dependency Resolution</name>

<t>The Dependency Resolution Command Sequence is a container for the Commands needed to acquire and process the Dependencies of the current Manifest. All Dependency Manifests SHOULD be fetched before any Payload is fetched to ensure that all Manifests are available and authenticated before any of the (larger) Payloads are acquired.</t>

</section>
<section anchor="added-and-modified-commands"><name>Added and Modified Commands</name>

<t>All Commands are modified in that they can also target Dependencies. However, Set Component Index has a larger modification.</t>

<texttable>
      <ttcol align='left'>Command Name</ttcol>
      <ttcol align='left'>Semantic of the Operation</ttcol>
      <c>Set Parameters</c>
      <c>current.params[k] := v if not k in current.params for-each k,v in arg</c>
      <c>Process Dependency</c>
      <c>exec(current[common]); exec(current[current-segment])</c>
      <c>Dependency Integrity</c>
      <c>verify(current, current.params[image-digest])</c>
      <c>Is Dependency</c>
      <c>assert(current exists in Dependencies)</c>
      <c>Unlink</c>
      <c>unlink(current)</c>
</texttable>

<section anchor="suit-directive-set-parameters"><name>suit-directive-set-parameters</name>

<t>Similar to suit-directive-override-parameters, suit-directive-set-parameters allows the Manifest to configure behavior of future Directives by changing Parameters that are read by those Directives. Set Parameters is for use when Dependencies are used because it allows a Manifest to modify the behavior of its Dependencies.</t>

<t>Available Parameters are defined in <xref target="I-D.ietf-suit-manifest"/>, section 8.4.8.</t>

<t>If a Parameter is already set, suit-directive-set-parameters will skip setting the Parameter to its argument. This allows dependent Manifests to change the behavior of a Manifest, a Dependency that wishes to enforce a specific value of a Parameter MAY use suit-directive-override-parameters instead.</t>

<t>suit-directive-set-parameters does not specify a reporting policy.</t>

</section>
<section anchor="suit-directive-process-dependency"><name>suit-directive-process-dependency</name>

<t>Execute the Commands in the common section of the current Dependency, followed by the Commands in the equivalent section of the current Dependency. For example, if the current section is "fetch Payload," this will execute "common" in the current Dependency, then "fetch Payload" in the current Dependency. Once this is complete, the Command following suit-directive-process-dependency will be processed.</t>

<t>If the current Component index does not have an entry in the suit-dependencies map, then this Command MUST Abort.</t>

<t>If the current Component index has not been the target of a suit-condition-dependency-integrity, then this Command MUST Abort.</t>

<t>If the current Component is True, then this Directive applies to all Dependencies. If the current section is "common," then the Command sequence MUST Abort.</t>

<t>When SUIT_Process_Dependency completes, it forwards the last status code that occurred in the Dependency.</t>

</section>
<section anchor="suit-condition-is-dependency"><name>suit-condition-is-dependency</name>

<t>Check whether the current Component index is present in the Dependency list. If the current Component is in the Dependency list, suit-condition-is-dependency succeeds. Otherwise, it fails. This can be used along with component-id = True to act on all Dependencies or on all non-Dependency Components. See <xref target="creating-manifests"/> for more details.</t>

</section>
<section anchor="suit-condition-dependency-integrity"><name>suit-condition-dependency-integrity</name>

<t>Verify the integrity of a Dependency Manifest. When a Manifest Processor executes suit-condition-dependency-integrity, it performs the following operations:</t>

<t><list style="numbers">
  <t>Verify the signature of the Manifest hash</t>
  <t>Compare the Manifest hash to the provided hash</t>
  <t>Verify the Manifest against the Manifest hash</t>
</list></t>

<t>If any of these steps fails, the Manifest Process MUST immediately Abort.</t>

<t>The Manifest Processor MAY cache the results of these operations for later use from the context of the current Manifest. The Manifest Processor MUST NOT use cached results from any other Manifest context. If the Manifest Processor caches the results of these checks, it MUST eliminate this cache if any Fetch, or Copy operation targets the Dependency Manifest's Component ID.</t>

</section>
<section anchor="suit-directive-unlink"><name>suit-directive-unlink</name>

<t>suit-directive-unlink applies to Manifests. When the Components defined by a Manifest are no longer needed, the Manifest processor unlinks the Manifest to inform the Manifest processor that they are no longer needed. The unlink Command decrements an implementation-defined reference counter. This reference counter MUST persist across restarts. The reference counter MUST NOT be decremented by a given Manifest more than once, and the Manifest processor must enforce this. The Manifest processor MAY choose to ignore a Unlink Directive depending on device policy.</t>

<t>When the reference counter reaches zero, the suit-uninstall Command sequence is invoked (see <xref target="suit-uninstall"/>).</t>

<t>suit-directive-unlink is OPTIONAL to implement in Manifest processors.</t>

</section>
</section>
<section anchor="suit-uninstall"><name>Uninstall</name>

<t>In some systems, particularly with multiple, independent, optional Components, it may be that there is a need to uninstall the Components that have been installed by a Manifest. Where this is expected, the uninstall Command sequence can provide the sequence needed to cleanly remove the Components defined by the Manifest and its Dependencies. In general, the suit-uninstall Command Sequence will contain primarily unlink Directives.</t>

<t>WARNING: This can cause faults where there are loose Dependencies (e.g., version range matching, see <xref target="I-D.ietf-suit-update-management"/>), since a Component can be removed while it is depended upon by another Component. To avoid Dependency faults, a Manifest author MAY use explicit Dependencies where possible, or a Manifest processor MAY track references to loose Dependencies via reference counting in the same way as explicit Dependencies, as described in <xref target="suit-directive-unlink"/>.</t>

<t>The suit-uninstall Command Sequence is not severable, since it must always be available to enable uninstalling.</t>

</section>
<section anchor="creating-manifests"><name>Creating Manifests</name>

<t>This section details a set of templates for creating Manifests. These templates explain which Parameters, Commands, and orders of Commands are necessary to achieve a stated goal.</t>

<section anchor="template-dependency"><name>Dependency Template</name>

<t>The goal of the Dependency template is to obtain, verify, and process a Dependency Manifest as appropriate.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following Commands are placed into the Dependency resolution sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.10 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate sequence contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>If any Dependency is declared, the dependent MUST populate all Command sequences for the current Procedure (Update or Invoke).</t>

<t>NOTE: Any changes made to Parameters in a Dependency persist in the dependent.</t>

</section>
<section anchor="composite-manifests"><name>Composite Manifests</name>

<t>An implementer MAY choose to place a Dependency's Envelope in the Envelope of its dependent. The dependent Envelope key for the Dependency Envelope MUST be a text string. The URI for the Dependency MUST match the text string key of the dependent's Envelope key. It is RECOMMENDED to make the text string key a resolvable URI so that a Dependency Manifest that is removed from the Envelope can still be fetched.</t>

</section>
<section anchor="template-encrypted-manifest"><name>Encrypted Manifest Template</name>

<t>The goal of the Encrypted Manifest template is to fetch and decrypt a Manifest so that it can be used as a Dependency. To use an encrypted Manifest, create a plaintext dependent, and add the encrypted Manifest as a Dependency. The dependent can include very little information.</t>

<t>NOTE: This template also requires the extensions defined in <xref target="I-D.ietf-suit-firmware-encryption"/>.</t>

<t>The following Commands are added to the shared sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for digest (see Section 8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>). Note that the digest MUST match the SUIT_Digest in the Dependency's suit-authentication-block (see Section 8.3 of <xref target="I-D.ietf-suit-manifest"/>).</t>
</list></t>

<t>The following operations are placed into the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for
  <list style="symbols">
      <t>URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
      <t>Encryption Info (See <xref target="I-D.ietf-suit-firmware-encryption"/>)</t>
    </list></t>
  <t>Fetch Directive (see Section 8.4.10.4 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>Then, the validate block contains the following operations:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Check Image Match Condition (see Section 8.4.9.2 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency Directive (see <xref target="suit-directive-process-dependency"/>)</t>
</list></t>

<t>A plaintext Manifest and its encrypted Dependency may also form a composite Manifest (<xref target="composite-manifests"/>).</t>

</section>
<section anchor="operating-on-multiple-components"><name>Operating on Multiple Components</name>

<t>In order to produce compact encoding, it is efficient to perform operations on multiple Components simultaneously. Because Dependency Manifests and Component Images are processed at different times, there is a mechanism to distinguish between these elements: suit-condition-is-dependency. This can be used with suit-directive-try-each to perform operations just on Dependency Manifests or just on Component Images.</t>

<t>For example, to fetch all Dependency Manifests, the following Commands are added to the Dependency resolution block:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Fetch</t>
          <t>Dependency Integrity Condition (see <xref target="suit-condition-dependency-integrity"/>)</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1 (Empty; no Commands, succeeds immediately)</t>
    </list></t>
</list></t>

<t>Another example is to fetch and validate all Component Images. The Image fetch sequence contains the following Commands:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for a URI (see Section 8.4.8.9 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument "True" (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Try Each Directive
  <list style="symbols">
      <t>Sequence 0
      <list style="symbols">
          <t>Condition Is Dependency Manifest</t>
          <t>Process Dependency</t>
        </list></t>
      <t>Sequence 1
      <list style="symbols">
          <t>Fetch</t>
          <t>Condition Image Match</t>
        </list></t>
    </list></t>
</list></t>

<t>When some Components are "installed" or "loaded" it is more productive to use lists of Component indices rather than Component Index = True. For example, to install several Components, the following Commands should be placed in the Image Install Sequence:</t>

<t><list style="symbols">
  <t>Set Component Index Directive (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Parameters Directive (see <xref target="suit-directive-set-parameters"/>) for the Source Component (see Section 8.4.8.11 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Set Component Index Directive, with argument containing list of destination Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Copy</t>
  <t>Set Component Index Directive, with argument containing list Dependency Component indices (see Section 8.4.10.1 of <xref target="I-D.ietf-suit-manifest"/>)</t>
  <t>Process Dependency</t>
</list></t>

</section>
</section>
<section anchor="iana"><name>IANA Considerations</name>

<t>IANA is requested to allocate the following numbers in the listed registries:</t>

<section anchor="suit-envelope-elements"><name>SUIT Envelope Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>15</c>
      <c>Dependency Resolution</c>
      <c><xref target="suit-dependency-resolution"/></c>
      <c>24</c>
      <c>Uninstall</c>
      <c><xref target="suit-uninstall"/></c>
</texttable>

</section>
<section anchor="suit-manifest-elements"><name>SUIT Manifest Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>5</c>
      <c>Manifest Component ID</c>
      <c><xref target="manifest-id"/></c>
</texttable>

</section>
<section anchor="suit-common-elements"><name>SUIT Common Elements</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>1</c>
      <c>Dependencies</c>
      <c><xref target="SUIT_Dependencies"/></c>
</texttable>

</section>
<section anchor="suit-commands"><name>SUIT Commands</name>

<texttable>
      <ttcol align='left'>Label</ttcol>
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>7</c>
      <c>Dependency Integrity</c>
      <c><xref target="suit-condition-dependency-integrity"/></c>
      <c>8</c>
      <c>Is Dependency</c>
      <c><xref target="suit-condition-is-dependency"/></c>
      <c>11</c>
      <c>Process Dependency</c>
      <c><xref target="suit-directive-process-dependency"/></c>
      <c>19</c>
      <c>Set Parameters</c>
      <c><xref target="suit-directive-set-parameters"/></c>
      <c>33</c>
      <c>Unlink</c>
      <c><xref target="suit-directive-unlink"/></c>
</texttable>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This document is about a Manifest format protecting and describing how to retrieve, install, and invoke Images and, as such, it is part of a larger solution for delivering software updates to devices. A detailed security treatment of SUIT
manifests can be found in the architecture <xref target="RFC9019"/> and in the information model <xref target="RFC9124"/> documents.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC7228">
  <front>
    <title>Terminology for Constrained-Node Networks</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="M. Ersue" initials="M." surname="Ersue"/>
    <author fullname="A. Keranen" initials="A." surname="Keranen"/>
    <date month="May" year="2014"/>
    <abstract>
      <t>The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7228"/>
  <seriesInfo name="DOI" value="10.17487/RFC7228"/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
         <organization>Inria</organization>
      </author>
      <author fullname="Ãyvind RÃ¸nningstad" initials="O." surname="RÃ¸nningstad">
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-24"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC9019">
  <front>
    <title>A Firmware Update Architecture for Internet of Things</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Brown" initials="D." surname="Brown"/>
    <author fullname="M. Meriac" initials="M." surname="Meriac"/>
    <date month="April" year="2021"/>
    <abstract>
      <t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t>
      <t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9019"/>
  <seriesInfo name="DOI" value="10.17487/RFC9019"/>
</reference>

<reference anchor="RFC9124">
  <front>
    <title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
    <author fullname="B. Moran" initials="B." surname="Moran"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <date month="January" year="2022"/>
    <abstract>
      <t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t>
      <t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9124"/>
  <seriesInfo name="DOI" value="10.17487/RFC9124"/>
</reference>


<reference anchor="I-D.ietf-suit-update-management">
   <front>
      <title>Update Management Extensions for Software Updates for Internet of Things (SUIT) Manifests</title>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="8" month="November" year="2023"/>
      <abstract>
	 <t>   This specification describes extensions to the SUIT manifest format
   defined in [I-D.ietf-suit-manifest].  These extensions allow an
   update author, update distributor or device operator to more
   precisely control the distribution and installation of updates to
   devices.  These extensions also provide a mechanism to inform a
   management system of Software Identifier and Software Bill Of
   Materials information about an updated device.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-update-management-05"/>
   
</reference>


<reference anchor="I-D.ietf-suit-firmware-encryption">
   <front>
      <title>Encrypted Payloads in SUIT Manifests</title>
      <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Brendan Moran" initials="B." surname="Moran">
         <organization>Arm Limited</organization>
      </author>
      <author fullname="David Brown" initials="D." surname="Brown">
         <organization>Linaro</organization>
      </author>
      <author fullname="Ken Takayama" initials="K." surname="Takayama">
         <organization>SECOM CO., LTD.</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This document specifies techniques for encrypting software, firmware,
   machine learning models, and personalization data by utilizing the
   IETF SUIT manifest.  Key agreement is provided by ephemeral-static
   (ES) Diffie-Hellman (DH) and AES Key Wrap (AES-KW).  ES-DH uses
   public key cryptography while AES-KW uses a pre-shared key.
   Encryption of the plaintext is accomplished with conventional
   symmetric key cryptography.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-firmware-encryption-18"/>
   
</reference>

<reference anchor="RFC9397">
  <front>
    <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
    <author fullname="M. Pei" initials="M." surname="Pei"/>
    <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
    <author fullname="D. Thaler" initials="D." surname="Thaler"/>
    <author fullname="D. Wheeler" initials="D." surname="Wheeler"/>
    <date month="July" year="2023"/>
    <abstract>
      <t>A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment. This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9397"/>
  <seriesInfo name="DOI" value="10.17487/RFC9397"/>
</reference>




    </references>


<?line 465?>

<section anchor="full-cddl"><name>A. Full CDDL</name>

<t>To be valid, the following CDDL MUST be appended to the SUIT Manifest CDDL. The SUIT CDDL is defined in Appendix A of <xref target="I-D.ietf-suit-manifest"/></t>

<figure><sourcecode type="CDDL"><![CDATA[
$$SUIT_Envelope_Extensions //= 
    (suit-delegation => bstr .cbor SUIT_Delegation)
$$SUIT_Envelope_Extensions //= (
    suit-integrated-dependency-key => bstr .cbor SUIT_Envelope)

SUIT_Delegation = [ + [ + bstr .cbor CWT ] ]

CWT = SUIT_Authentication_Block

$$SUIT_Manifest_Extensions //= 
    (suit-manifest-component-id => SUIT_Component_Identifier)

$$SUIT_severable-members-extensions //= 
    (suit-dependency-resolution => bstr .cbor SUIT_Command_Sequence)

$$unseverable-manifest-member-extensions //= 
    (suit-uninstall => bstr .cbor SUIT_Command_Sequence)

suit-integrated-dependency-key = tstr

$$severable-manifest-members-choice-extensions //= (
    suit-dependency-resolution =>
        bstr .cbor SUIT_Command_Sequence / SUIT_Digest)

$$SUIT_Common-extensions //= (
    suit-dependencies => SUIT_Dependencies
)
SUIT_Dependencies = {
    + uint => SUIT_Dependency_Metadata
}
SUIT_Dependency_Metadata = {
    ? suit-dependency-prefix => SUIT_Component_Identifier
    * $$SUIT_Dependency_Extensions
}

SUIT_Condition // (
    suit-condition-dependency-integrity, SUIT_Rep_Policy)
SUIT_Condition //= (
    suit-condition-is-dependency, SUIT_Rep_Policy)

SUIT_Directive //= (
    suit-directive-process-dependency, SUIT_Rep_Policy)
SUIT_Directive //= (suit-directive-set-parameters,
    {+ $$SUIT_Parameters})
SUIT_Directive //= (
    suit-directive-unlink, SUIT_Rep_Policy)

suit-manifest-component-id = 5

suit-delegation = 1
suit-dependency-resolution = 15
suit-uninstall = 24

suit-dependencies = 1

suit-dependency-prefix = 1

suit-condition-dependency-integrity     = 7
suit-condition-is-dependency            = 8
suit-directive-process-dependency       = 11
suit-directive-set-parameters           = 19
suit-directive-unlink                   = 33

]]></sourcecode></figure>

</section>
<section anchor="examples"><name>B. Examples</name>

<t>The following examples demonstrate a small subset of the functionalities in this document.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-1-process-dependency"><name>Example 1: Process Dependency</name>

<t>This example uses functionalities:</t>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'4874ADC80A9128A2B2057F5FE59C45F8ED10A9BF9C5308FCF951B8BBAF434B95'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'C257E23A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD2209886889
          1DF42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B916'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "http://example.com/dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51'
        ] >>
      },
      / condition-dependency-integrity / 7, 15,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  374</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F58204874ADC80A9128A2B2057F5FE59C45F8ED
10A9BF9C5308FCF951B8BBAF434B95584AD28443A10126A0F65840C257E2
3A34960BE215BB9B927A5A3CEEDD675DFD81AE6E55A66FDD22098868891D
F42D71ADB962A64CC008AEF9465DA2153CCF383F00B505F079DB540F64B9
160358FAA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5858880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160157821687474703A2F2F6578616D706C652E636F6D2F
646570656E64656E742E737569741502030F1158538E0C0114A103582482
2F58206EA128D7BB19B86F77C4227F2A29F22026A41958ACC45CC0A35BA3
88B13E2F51070F0B000C0014A112581A20696E206D756C7469706C652074
7275737420646F6D61696E73120F
]]></artwork></figure>

</section>
<section anchor="example-2-integrated-dependency"><name>Example 2: Integrated Dependency</name>

<t><list style="symbols">
  <t>manifest component id</t>
  <t>dependency resolution</t>
  <t>process dependency</t>
  <t>integrated dependency</t>
</list></t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107({
  / authentication-wrapper / 2: << [
    << [
      / digest-algorithm-id: / -16 / SHA256 /,
      / digest-bytes: /
        h'318EAD5F671A6D2593D7ADB7B6CCADC49F72704507004F297A25AF16A48A2111'
    ] >>,
    << / COSE_Sign1_Tagged / 18([
      / protected: / << {
        / algorithm-id / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: /
        h'287D5AAB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C99
          50D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627DC3'
    ]) >>
  ] >>,
  / manifest / 3: << {
    / manifest-version / 1: 1,
    / manifest-sequence-number / 2: 0,
    / common / 3: << {
      / dependencies / 1: {
        / component-index / 1: {
          / dependency-prefix / 1: [
            'dependent.suit'
          ]
        }
      },
      / components / 2: [
        [
          '10'
        ]
      ]
    } >>,
    / manifest-component-id / 5: [
      'depending.suit'
    ],
    / invoke / 9: << [
      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-invoke-args / 23: 'cat 00 10'
      },
      / directive-invoke / 23, 15
    ] >>,
    / dependency-resolution / 15: << [
      / directive-set-component-index / 12, 1,
      / directive-override-parameters / 20, {
        / parameter-image-digest / 3: << [
          / digest-algorithm-id: / -16 / SHA256 /,
          / digest-bytes: /
            h'6C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0DB23E768'
        ] >>,
        / parameter-image-size / 14: 352,
        / parameter-uri / 21: "#dependent.suit"
      },
      / directive-fetch / 21, 2,
      / condition-image-match / 3, 15
    ] >>,
    / install / 17: << [
      / directive-set-component-index / 12, 1,
      / directive-process-dependency / 11, 0,

      / directive-set-component-index / 12, 0,
      / directive-override-parameters / 20, {
        / parameter-content / 18: ' in multiple trust domains'
      },
      / directive-write / 18, 15
    ] >>
  } >>,
  / NOTE: Example 0 /
  "#dependent.suit":
    h'D86BA301589E8181589AD28443A10126A0584FA108A101A4010220012158200E
      908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD03ABA68B22
      582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D71D314B2749EE42
      D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F798715CC10B5A0010B11925
      C155E7245A64E131073B87AC50CAC71650A21315B82D06CA2298CD1A95519AAE
      4C4B5315025874835824822F58206EA128D7BB19B86F77C4227F2A29F22026A4
      1958ACC45CC0A35BA388B13E2F51584AD28443A10126A0F6584099F949043701
      D7BDBA38904A0B49F004DED6B64A4900DECA5C66AE8A9EBA913576DEF136B74E
      A89C14FA64624DBD33B4C0BB41C153CA51548C73FF71A2BAF27440035842A601
      0102000347A102818142303005814E646570656E64656E742E73756974094D84
      14A11746636174203030170F11528414A1124B68656C6C6F20776F726C64120F'
})
]]></artwork></figure>

<t>Total size of Envelope with COSE authentication object:  683</t>

<t>Envelope with COSE authentication object:</t>

<figure><artwork><![CDATA[
D86BA3025873825824822F5820318EAD5F671A6D2593D7ADB7B6CCADC49F
72704507004F297A25AF16A48A2111584AD28443A10126A0F65840287D5A
AB44D08A34954663942B2732825426893ACD735BF3A79B8B5B38EC3C9950
D917D72D5586867C8FF58CF5827B0C2B94952359C3971DBF202B0774627D
C30358BCA70101020003581CA201A101A101814E646570656E64656E742E
7375697402818142313005814E646570656E64696E672E73756974095286
0C0014A11749636174203030203130170F0F5845880C0114A3035824822F
58206C86246B90D644F021671F6D42523B2CB5E156F764BE618AA46BFCD0
DB23E7680E190160156F23646570656E64656E742E737569741502030F11
58288A0C010B000C0014A112581A20696E206D756C7469706C6520747275
737420646F6D61696E73120F6F23646570656E64656E742E737569745901
60D86BA301589E8181589AD28443A10126A0584FA108A101A40102200121
58200E908AA8F066DB1F084E0C3652C63952BD99F2A5BDB22F9E01367AAD
03ABA68B22582077DA1BD8AC4F0CB490BA210648BF79AB164D49AD3551D7
1D314B2749EE42D29A5840FB2D5ACF66B9C8573CE92E13BFB8D113F79871
5CC10B5A0010B11925C155E7245A64E131073B87AC50CAC71650A21315B8
2D06CA2298CD1A95519AAE4C4B5315025874835824822F58206EA128D7BB
19B86F77C4227F2A29F22026A41958ACC45CC0A35BA388B13E2F51584AD2
8443A10126A0F6584099F949043701D7BDBA38904A0B49F004DED6B64A49
00DECA5C66AE8A9EBA913576DEF136B74EA89C14FA64624DBD33B4C0BB41
C153CA51548C73FF71A2BAF27440035842A6010102000347A10281814230
3005814E646570656E64656E742E73756974094D8414A117466361742030
30170F11528414A1124B68656C6C6F20776F726C64120F
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

